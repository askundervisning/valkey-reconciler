name: Build and Push valkey-reconciler

on:
  push:
    branches: [ main ]
    paths:
      - 'valkey-reconciler/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'valkey-reconciler/**'
  release:
    types: [created]

  workflow_dispatch:
    inputs:
      why:
        required: false
        type: string
        default: "testing"
        description: "Why is this build happening?"
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/valkey-reconciler

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Run tests
        run: |
          cd valkey-reconciler
          go test -v
        
      - name: Run tests with coverage
        run: |
          cd valkey-reconciler
          go test -coverprofile=coverage.out -covermode=atomic
          go tool cover -html=coverage.out -o coverage.html
          go tool cover -func=coverage.out -o coverage.txt

      - name: Run benchmarks
        run: |
          cd valkey-reconciler
          go test -bench=.

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            valkey-reconciler/coverage.out
            valkey-reconciler/coverage.html
            valkey-reconciler/coverage.txt

      - name: Comment coverage on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            try {
              const coverage = fs.readFileSync('valkey-reconciler/coverage.txt', 'utf8');
              const coverageLines = coverage.split('\n');
              const totalLine = coverageLines.find(line => line.includes('total:'));
              
              let coveragePercent = 'Unknown';
              if (totalLine) {
                const match = totalLine.match(/(\d+\.\d+)%/);
                if (match) {
                  coveragePercent = match[1] + '%';
                }
              }
              
              const body = `## ðŸ“Š Test Coverage Report
              
              **Total Coverage:** ${coveragePercent}
              
              <details>
              <summary>ðŸ“‹ Function Coverage Details</summary>
              
              \`\`\`
              ${coverage}
              \`\`\`
              </details>
              
              Coverage reports are also available as artifacts in this workflow run.`;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            } catch (error) {
              console.log('Could not read coverage file:', error);
            }

      - name: Build application
        run: |
          cd valkey-reconciler
          go build

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=sha,format=short
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
            type=ref,event=tag
            type=semver,pattern={{version}},event=tag

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./valkey-reconciler
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
